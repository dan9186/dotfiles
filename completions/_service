#compdef _service service


function _service {
  local -a commands

  _arguments -C \
    '--db[whether the service will have a database or not]' \
    '--installable[whether the service will be installable or not]' \
    '--name[service name]:' \
    '--org[organization name]:' \
    '--source[source location]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "completion:Generate completion files for service"
      "dockercompose:Generate a bootstrap of a Dockercompose"
      "dockerfile:Generate a bootstrap of a Dockerfile"
      "features:Generate a bootstrap of functional tests"
      "gitignore:Generate a bootstrap of a Gitignore"
      "gofiles:Generate a bootstrap of Go files"
      "help:Help about any command"
      "license:Generate a bootstrap of a License"
      "makefile:Generate a bootstrap of a Makefile"
      "readme:Generate a bootstrap of a Readme"
      "version:Display the version"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  completion)
    _service_completion
    ;;
  dockercompose)
    _service_dockercompose
    ;;
  dockerfile)
    _service_dockerfile
    ;;
  features)
    _service_features
    ;;
  gitignore)
    _service_gitignore
    ;;
  gofiles)
    _service_gofiles
    ;;
  help)
    _service_help
    ;;
  license)
    _service_license
    ;;
  makefile)
    _service_makefile
    ;;
  readme)
    _service_readme
    ;;
  version)
    _service_version
    ;;
  esac
}

function _service_completion {
  _arguments \
    '(-h --help)'{-h,--help}'[help for completion]'
}

function _service_dockercompose {
  _arguments
}

function _service_dockerfile {
  _arguments
}

function _service_features {
  _arguments
}

function _service_gitignore {
  _arguments
}

function _service_gofiles {
  _arguments
}

function _service_help {
  _arguments
}

function _service_license {
  _arguments
}

function _service_makefile {
  _arguments
}

function _service_readme {
  _arguments
}

function _service_version {
  _arguments
}

